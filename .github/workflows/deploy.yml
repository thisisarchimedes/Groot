name: Deploy Stage

on:
  workflow_dispatch:
  push:
    branches: [main]

env:
  ENVIRONMENT: ${{ vars.DEFAULT_ENVIRONMENT }}
  DOTENV_KEY: ${{ secrets.DOTENV_KEY }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
  API_DEVOPS_EVENT_CATCHER: ${{ vars.API_DEVOPS_EVENT_CATCHER }}
  DEVOPS_EVENTS_SECRET_TOKEN: ${{ secrets.DEVOPS_EVENTS_SECRET_TOKEN }}
  EKS_REGION: us-west-1
  ECR_REGISTRY: 240910251918.dkr.ecr.us-west-1.amazonaws.com
  ECR_REPO: groot

jobs:
  build:
    name: Build and Push Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dotenvx
        run: |
          curl -fsS https://dotenvx.sh/ | sh

      - name: Install dependencies
        run: yarn install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.EKS_REGION }}    

      - name: Build main Groot container
        run: |
          docker pull node:20
          docker build --no-cache -t groot-container -f scripts/container_main_groot/Dockerfile .

      - name: Push main Groot container
        run: |
          aws ecr get-login-password --region ${{ env.EKS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
          docker tag groot-container:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}/groot-container:latest
          docker push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}/groot-container:latest

      - name: Build and push read node container
        run: |
          ./scripts/container_reader_node/build_read_node_container.sh ${{ secrets.ALCHEMY_API_KEY }}
          
          aws ecr get-login-password --region ${{ env.EKS_REGION }} | docker login --username AWS --password-stdin ${{env.ECR_REGISTRY}}
          docker tag arch-production-node:latest ${{env.ECR_REGISTRY}}/${{ env.ECR_REPO }}/arch-production-node:latest
          docker push ${{env.ECR_REGISTRY}}/${{ env.ECR_REPO }}/arch-production-node:latest

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Deploy to EKS (DemoApp)
        run: |
          # Update kubeconfig
          aws eks update-kubeconfig --name groot-demo-app --region ${{ env.EKS_REGION }}
      
          # Create namespace if it doesn't exist
          kubectl create namespace groot --dry-run=client -o yaml | kubectl apply -f -
      
          # Deploy Kubernetes manifests
          kubectl apply -f scripts/k8s/demoapp-configmap.yaml
          kubectl apply -f scripts/k8s/deployment.yaml
          kubectl apply -f scripts/k8s/service.yaml
          kubectl apply -f scripts/k8s/cronjob.yaml
      
          # Verify deployment
          kubectl get pods -n groot

      - name: List all commit SHAs involved in the push
        id: format_commits
        shell: bash
        run: |
          ./devops/github_actions_templates/get_commit_shas.sh ${{ github.event.before }} ${{ github.event.after }} > commit_shas.txt
          COMMIT_SHAS_JSON=$(cat commit_shas.txt)
          echo "::set-output name=commit_shas::$COMMIT_SHAS_JSON"

      - name: Report DevOps Event
        run: |
          yarn add axios dotenv
          node devops/metrics/src/cicd_script/report_devops_event.js ${{ github.repository }} deploy '{"commit_ids": ${{ steps.format_commits.outputs.commit_shas }} }'

      - name: Slack Notification
        if: always()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}